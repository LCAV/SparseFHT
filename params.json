{"name":"SparseFHT","tagline":"A Fast Hadamard Transform for Signals with Sub-linear Sparsity in the Transform Domain - Implementation","body":"This is the code for SparseFHT algorithm as presented in the following papers.\r\nThe code is hosted on [github](https://github.com/LCAV/SparseFHT).\r\n\r\n[Long] R. Scheibler, S.Haghighatshoar, and M. Vetterli,\r\n[_A Fast Hadamard Transform for Signals with Sub-linear Sparsity in the Transform Domain_](http://infoscience.epfl.ch/record/204991),\r\nIEEE Trans. Inf. Theory, vol. 61, 2015.\r\n\r\n[Short] R. Scheibler, S. Haghighatshoar, and M. Vetterli,\r\n[_A Fast Hadamard Transform for Signals with Sub-linear Sparsity_](http://infoscience.epfl.ch/record/189818),\r\nAllerton Conference on Communication, Control and Computing, 2013.\r\n\r\n\r\nAbstract\r\n--------\r\n\r\nIn this paper, we design a new iterative low-complexity algorithm for\r\ncomputing the Walsh-Hadamard transform (WHT) of an N dimensional signal with\r\na K-sparse WHT.  We suppose that N is a power of two and K = O(N^α), scales\r\nsub-linearly in N for some α ∈ (0,1). Assuming a random support model for the\r\nnonzero transform-domain components, our algorithm reconstructs the WHT of the\r\nsignal with a sample complexity O(K log\\_(N/K)) and a computational complexity\r\nO(K log\\_2(K)log\\_2(N/K)). Moreover, the algorithm succeeds with a high\r\nprobability approaching 1 for large dimension N.  \r\n\r\nOur approach is mainly based on the subsampling (aliasing) property of the WHT,\r\nwhere by a carefully designed subsampling of the time-domain signal, a suitable\r\naliasing pattern is induced in the transform domain. We treat the resulting\r\naliasing patterns as parity-check constraints and represent them by a bipartite\r\ngraph.  We analyze the properties of the resulting bipartite graphs and borrow\r\nideas from codes defined over sparse bipartite graphs to formulate the recovery\r\nof the nonzero spectral values as a peeling decoding algorithm for a specific\r\nsparse-graph code transmitted over a binary erasure channel (BEC). This enables\r\nus to use tools from coding theory (belief-propagation analysis) to\r\ncharacterize the asymptotic performance of our algorithm in the very sparse (α\r\n∈ (0,1/3]) and the less sparse (α ∈ (1/3,1)) regime. Comprehensive simulation\r\nresults are provided to assess the empirical performance of the proposed\r\nalgorithm.\r\n\r\nContact\r\n-------\r\n\r\nRobin Scheibler \r\n([email](mailto:robin[dot]scheibler[at]epfl[dot]ch))\r\n([homepage](http://lcav.epfl.ch/Robin_Scheibler))\r\n\r\nPlease do not hesitate to contact me for help and support!\r\nI would be happy to help you run the code.\r\n\r\nPlateform\r\n---------\r\n\r\nThe code has been tested on Mac OS X 10.7, 10.8, 10.9, and on Ubuntu linux.\r\n\r\nMatlab mex wrappers were used for the code generating the figures in the paper. The core of the algorithm is implemented in C.\r\n\r\nRun the code in Matlab\r\n----------------------\r\n\r\n### Reproduce the figures from the paper\r\n\r\nTo reproduce the figures from the paper, type in the following in a matlab shell:\r\n\r\n    cd <path_to_SparseFHT>/matlab/\r\n    make_mex_files\r\n    make_figures\r\n\r\n__Note__\r\n\r\n1. The simulation is fairly time-consuming.\r\n2. To speed-up the simulation, the parallel toolbox was used. If you do not have the parallel toolbox, replace the `parfor` instructions by `for` in all the Sim scripts.\r\n\r\n### Mex files info\r\n\r\n* **SparseFHT** The fast sparse Hadamard transform algorithm.\r\n\r\n         [Y, S, U, I] = SparseFHT(X, K, B, C, L, T)\r\n\r\n         Wrapper for the Sparse Fast Hadamard Transform\r\n         \r\n         Input arguments:\r\n         X: input vector  (size n)\r\n         K: the sparsity (and size of y)\r\n         B: number of buckets\r\n         C: oversampling factor\r\n         L: maximum number of iterations of decoder\r\n         T: Type of algorithm to use ('Random' / 'Deterministic' / 'Optimized')\r\n         \r\n         Output arguments: \r\n         Y: output vector (size K)\r\n         S: support vector (size K)\r\n         U: the number of unsatisfied checks (optional)\r\n         I: the number of loops run (optional)\r\n\r\n\r\n* **FastHadamard** A straighforward implementation of the conventional fast\r\n  Hadamard transform. No scaling factor is applied, i.e. applying the algorithm\r\n  twice will result in the input vector weighted by its length.\r\n\r\n        [Y] = FastHadamard(X)\r\n\r\n        Input arguments:\r\n        X: input vector (size has to be a power of two)\r\n\r\n        Output arguments:\r\n        Y: output vector, the Hadamard transform of X.\r\n\r\n* **HadamardBenchmark** Calls a C routine performing a timing comparison of SparseFHT and FastHadamard.\r\n\r\n        [Tfht Tsfht] = HadamardBenchmark(N, K, B, C, L, R, SEED)\r\n\r\n        Input arguments:\r\n        N: transform size to investigate (scalar, power of two)\r\n        K: sparsity parameter, number of non-zero tranform domain coefficients (vector, power of two)\r\n        B: number of buckets to use in SparseFHT (vector, same size as K, power of two)\r\n        C: oversampling factor\r\n        L: maximum number of iterations of decoder\r\n        R: a length 4 vector containing the following parameters\r\n            1. Number of repetitions of one measurement\r\n            2. Number of warm-up run \r\n            3. Number of iterations for one measurement\r\n            4. Maximum magnitude of non-zero components in the sparse signal\r\n        SEED: A seed for the C random number generator\r\n\r\n        Output arguments:\r\n\r\n        Tfht: The runtime measurement of FastHadamard\r\n        Tsfht: An array containing the runtime measurement of SparseFHT for every value of K\r\n\r\nReuse the C code\r\n----------------\r\n\r\nThe makefile in `./C` folder will compile all the code as well as a number\r\nof example/test files. This can be used as a basis to reuse the C code directly.\r\n\r\n    cd ../C\r\n    make all\r\n\r\nThe libraries included are:\r\n\r\n* SparseFHT,\r\n* Fast Hadamard tranform,\r\n* Fast linear algebra in GF2 (boolean matrices and vectors algebra),\r\n* Test files.\r\n\r\nLicense\r\n-------\r\n\r\n2013-2015 (c) Robin Scheibler, Saeid Haghighatshoar, Martin, Vetterli.\r\n\r\nThis work is licensed under the Creative Commons\r\nAttribution-NonCommercial-ShareAlike 4.0 International License. To view a copy\r\nof this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.\r\n\r\nThe code is free to reuse for non-commercial and academic purposes. However,\r\nplease acknowledge its use with the following citation.\r\n\r\n    @article{EPFL-JOUR-204991,\r\n       author      = {Scheibler, Robin and Haghighatshoar, Saeid and Vetterli, Martin},\r\n       title       = {A {F}ast {H}adamard {T}ransform for {S}ignals with\r\n                     {S}ub-linear {S}parsity in the {T}ransform {D}omain},\r\n       journal     = {IEEE Trans. Inf. Theory}\r\n       volume      = 61,\r\n       year        = 2015,\r\n       ee          = {http://infoscience.epfl.ch/record/204991}\r\n    }\r\n\r\nFor any other purposes, please contact the authors.\r\n","google":"UA-47808262-1","note":"Don't delete this file! It's used internally to help with page regeneration."}